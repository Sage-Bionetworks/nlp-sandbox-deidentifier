# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DeidentificationConfigDeidentificationStrategyMaskingCharConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, masking_char='*'):  # noqa: E501
        """DeidentificationConfigDeidentificationStrategyMaskingCharConfig - a model defined in OpenAPI

        :param masking_char: The masking_char of this DeidentificationConfigDeidentificationStrategyMaskingCharConfig.  # noqa: E501
        :type masking_char: str
        """
        self.openapi_types = {
            'masking_char': str
        }

        self.attribute_map = {
            'masking_char': 'maskingChar'
        }

        self._masking_char = masking_char

    @classmethod
    def from_dict(cls, dikt) -> 'DeidentificationConfigDeidentificationStrategyMaskingCharConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeidentificationConfig_deidentificationStrategy_maskingCharConfig of this DeidentificationConfigDeidentificationStrategyMaskingCharConfig.  # noqa: E501
        :rtype: DeidentificationConfigDeidentificationStrategyMaskingCharConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def masking_char(self):
        """Gets the masking_char of this DeidentificationConfigDeidentificationStrategyMaskingCharConfig.

        Character used to mask annotated PII text.  # noqa: E501

        :return: The masking_char of this DeidentificationConfigDeidentificationStrategyMaskingCharConfig.
        :rtype: str
        """
        return self._masking_char

    @masking_char.setter
    def masking_char(self, masking_char):
        """Sets the masking_char of this DeidentificationConfigDeidentificationStrategyMaskingCharConfig.

        Character used to mask annotated PII text.  # noqa: E501

        :param masking_char: The masking_char of this DeidentificationConfigDeidentificationStrategyMaskingCharConfig.
        :type masking_char: str
        """
        if masking_char is not None and len(masking_char) > 1:
            raise ValueError("Invalid value for `masking_char`, length must be less than or equal to `1`")  # noqa: E501
        if masking_char is not None and len(masking_char) < 1:
            raise ValueError("Invalid value for `masking_char`, length must be greater than or equal to `1`")  # noqa: E501

        self._masking_char = masking_char
