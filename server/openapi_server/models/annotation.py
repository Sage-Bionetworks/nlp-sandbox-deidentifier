# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.annotation_source import AnnotationSource
from openapi_server.models.text_date_annotation import TextDateAnnotation
from openapi_server.models.text_person_name_annotation import TextPersonNameAnnotation
from openapi_server.models.text_physical_address_annotation import TextPhysicalAddressAnnotation
from openapi_server import util

from openapi_server.models.annotation_source import AnnotationSource  # noqa: E501
from openapi_server.models.text_date_annotation import TextDateAnnotation  # noqa: E501
from openapi_server.models.text_person_name_annotation import TextPersonNameAnnotation  # noqa: E501
from openapi_server.models.text_physical_address_annotation import TextPhysicalAddressAnnotation  # noqa: E501

class Annotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, annotation_source=None, text_date_annotations=None, text_person_name_annotations=None, text_physical_address_annotations=None):  # noqa: E501
        """Annotation - a model defined in OpenAPI

        :param name: The name of this Annotation.  # noqa: E501
        :type name: str
        :param annotation_source: The annotation_source of this Annotation.  # noqa: E501
        :type annotation_source: AnnotationSource
        :param text_date_annotations: The text_date_annotations of this Annotation.  # noqa: E501
        :type text_date_annotations: List[TextDateAnnotation]
        :param text_person_name_annotations: The text_person_name_annotations of this Annotation.  # noqa: E501
        :type text_person_name_annotations: List[TextPersonNameAnnotation]
        :param text_physical_address_annotations: The text_physical_address_annotations of this Annotation.  # noqa: E501
        :type text_physical_address_annotations: List[TextPhysicalAddressAnnotation]
        """
        self.openapi_types = {
            'name': str,
            'annotation_source': AnnotationSource,
            'text_date_annotations': List[TextDateAnnotation],
            'text_person_name_annotations': List[TextPersonNameAnnotation],
            'text_physical_address_annotations': List[TextPhysicalAddressAnnotation]
        }

        self.attribute_map = {
            'name': 'name',
            'annotation_source': 'annotationSource',
            'text_date_annotations': 'textDateAnnotations',
            'text_person_name_annotations': 'textPersonNameAnnotations',
            'text_physical_address_annotations': 'textPhysicalAddressAnnotations'
        }

        self._name = name
        self._annotation_source = annotation_source
        self._text_date_annotations = text_date_annotations
        self._text_person_name_annotations = text_person_name_annotations
        self._text_physical_address_annotations = text_physical_address_annotations

    @classmethod
    def from_dict(cls, dikt) -> 'Annotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Annotation of this Annotation.  # noqa: E501
        :rtype: Annotation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Annotation.

        Resource name of the annotation record, of the form datasets/{datasetId}/annotationStores/{annotationStoreId}/annotations/{annotationId}  # noqa: E501

        :return: The name of this Annotation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Annotation.

        Resource name of the annotation record, of the form datasets/{datasetId}/annotationStores/{annotationStoreId}/annotations/{annotationId}  # noqa: E501

        :param name: The name of this Annotation.
        :type name: str
        """

        self._name = name

    @property
    def annotation_source(self):
        """Gets the annotation_source of this Annotation.


        :return: The annotation_source of this Annotation.
        :rtype: AnnotationSource
        """
        return self._annotation_source

    @annotation_source.setter
    def annotation_source(self, annotation_source):
        """Sets the annotation_source of this Annotation.


        :param annotation_source: The annotation_source of this Annotation.
        :type annotation_source: AnnotationSource
        """

        self._annotation_source = annotation_source

    @property
    def text_date_annotations(self):
        """Gets the text_date_annotations of this Annotation.

        Date annotations in a text  # noqa: E501

        :return: The text_date_annotations of this Annotation.
        :rtype: List[TextDateAnnotation]
        """
        return self._text_date_annotations

    @text_date_annotations.setter
    def text_date_annotations(self, text_date_annotations):
        """Sets the text_date_annotations of this Annotation.

        Date annotations in a text  # noqa: E501

        :param text_date_annotations: The text_date_annotations of this Annotation.
        :type text_date_annotations: List[TextDateAnnotation]
        """

        self._text_date_annotations = text_date_annotations

    @property
    def text_person_name_annotations(self):
        """Gets the text_person_name_annotations of this Annotation.

        Person name annotations in a text  # noqa: E501

        :return: The text_person_name_annotations of this Annotation.
        :rtype: List[TextPersonNameAnnotation]
        """
        return self._text_person_name_annotations

    @text_person_name_annotations.setter
    def text_person_name_annotations(self, text_person_name_annotations):
        """Sets the text_person_name_annotations of this Annotation.

        Person name annotations in a text  # noqa: E501

        :param text_person_name_annotations: The text_person_name_annotations of this Annotation.
        :type text_person_name_annotations: List[TextPersonNameAnnotation]
        """

        self._text_person_name_annotations = text_person_name_annotations

    @property
    def text_physical_address_annotations(self):
        """Gets the text_physical_address_annotations of this Annotation.

        Physical address annotations in a text  # noqa: E501

        :return: The text_physical_address_annotations of this Annotation.
        :rtype: List[TextPhysicalAddressAnnotation]
        """
        return self._text_physical_address_annotations

    @text_physical_address_annotations.setter
    def text_physical_address_annotations(self, text_physical_address_annotations):
        """Sets the text_physical_address_annotations of this Annotation.

        Physical address annotations in a text  # noqa: E501

        :param text_physical_address_annotations: The text_physical_address_annotations of this Annotation.
        :type text_physical_address_annotations: List[TextPhysicalAddressAnnotation]
        """

        self._text_physical_address_annotations = text_physical_address_annotations
